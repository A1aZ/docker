name: Bleeding Docker Image CI

on:
  push:
    branches:
      - master
  pull:
  schedule:
    - cron: '0 4 * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-bleeding-${{ github.sha }}
      - name: Build the Docker image
        run: docker buildx build --output "type=image,push=false" $(.github/bin/get-buildx-args)


  test:
    runs-on: ubuntu-latest
    name: Test
    needs: [build]
    env:
      COMPOSE_PROJECT_NAME: wl
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-bleeding-${{ github.sha }}
      - name: Build the Docker image
        run: docker buildx build --output "type=image,push=false" $(.github/bin/get-buildx-args)
      - name: Test the Docker image
        run: |
          cd docker-compose
          ./test.sh

  test-ssl:
    runs-on: ubuntu-latest
    name: Test SSL
    needs: [build]
    env:
      COMPOSE_PROJECT_NAME: wl
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-bleeding-${{ github.sha }}
      - name: Build the Docker image
        run: docker buildx build --output "type=image,push=false" $(.github/bin/get-buildx-args)
      - name: Prepare the container
        run: |
          cd docker-compose
          docker-compose up -d
          docker-compose down
      - name: Test the Docker image with SSL
        run: |
          cd docker-compose
          VOLUMEPATH=$(docker volume inspect -f '{{.Mountpoint}}' wl_weblate-data)
          sudo mkdir -p $VOLUMEPATH/ssl
          sudo openssl req -x509 -nodes -days 365 -subj "/CN=weblate.example.com" -newkey rsa:2048 -keyout $VOLUMEPATH/ssl/privkey.pem -out $VOLUMEPATH/ssl/fullchain.pem
          sudo chown -R 1000:1000 $VOLUMEPATH/ssl
          ./test.sh 4443 https

  push_dockerhub:

    runs-on: ubuntu-latest
    name: Publish the Docker images
    needs: [test, test-ssl]
    if: startsWith(github.ref, 'refs/tags/') || (github.ref == 'refs/heads/master')

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v3
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-bleeding-${{ github.sha }}
      - name: DockerHub login
        run: echo "${{ secrets.DOCKERHUB_ACCESS_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Publish the Docker images
        run: docker buildx build --push $(.github/bin/get-buildx-args bleeding)
