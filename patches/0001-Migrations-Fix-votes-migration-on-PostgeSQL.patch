From cb70b83bc5dcc046abc043df5878f73fcd23d9d5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Michal=20=C4=8Ciha=C5=99?= <michal@cihar.com>
Date: Wed, 3 Jul 2019 16:13:53 +0200
Subject: [PATCH 1/1] Migrations: Fix votes migration on PostgeSQL
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

We can not migrate schema and data in one migration. So now the
migration is split into three (add new field, migrate value and remove
old field) with additional logic to skip the migration if it was already
done by the merged one.

Fixes #2851

Signed-off-by: Michal Čihař <michal@cihar.com>
---
 weblate/trans/migrations/0028_vote_value.py | 10 +---------
 weblate/trans/migrations/0029_vote_value.py | 20 ++++++++++++++++++++
 weblate/trans/migrations/0030_vote_value.py | 21 +++++++++++++++++++++
 weblate/utils/db.py                         | 14 +++++++++++++-
 4 files changed, 55 insertions(+), 10 deletions(-)
 create mode 100644 weblate/trans/migrations/0029_vote_value.py
 create mode 100644 weblate/trans/migrations/0030_vote_value.py

diff --git a/weblate/trans/migrations/0028_vote_value.py b/weblate/trans/migrations/0028_vote_value.py
index cb8e046e88..b2e6c3bb6d 100644
--- a/weblate/trans/migrations/0028_vote_value.py
+++ b/weblate/trans/migrations/0028_vote_value.py
@@ -3,12 +3,6 @@
 from django.db import migrations, models
 
 
-def migrate_votes(apps, schema_editor):
-    Vote = apps.get_model("trans", "Vote")
-    Vote.objects.filter(positive=True).update(value=1)
-    Vote.objects.filter(positive=False).update(value=-1)
-
-
 class Migration(migrations.Migration):
 
     dependencies = [("trans", "0027_auto_20190517_1125")]
@@ -16,7 +10,5 @@ class Migration(migrations.Migration):
     operations = [
         migrations.AddField(
             model_name="vote", name="value", field=models.SmallIntegerField(default=0)
-        ),
-        migrations.RunPython(migrate_votes),
-        migrations.RemoveField(model_name="vote", name="positive"),
+        )
     ]
diff --git a/weblate/trans/migrations/0029_vote_value.py b/weblate/trans/migrations/0029_vote_value.py
new file mode 100644
index 0000000000..4f83222e5f
--- /dev/null
+++ b/weblate/trans/migrations/0029_vote_value.py
@@ -0,0 +1,20 @@
+# Generated by Django 2.2.1 on 2019-05-21 18:16
+
+from django.db import migrations
+
+from weblate.utils.db import table_has_row
+
+
+def migrate_votes(apps, schema_editor):
+    if not table_has_row(schema_editor.connection, "trans_vote", "positive"):
+        return
+    Vote = apps.get_model("trans", "Vote")
+    Vote.objects.filter(positive=True).update(value=1)
+    Vote.objects.filter(positive=False).update(value=-1)
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [("trans", "0028_vote_value")]
+
+    operations = [migrations.RunPython(migrate_votes)]
diff --git a/weblate/trans/migrations/0030_vote_value.py b/weblate/trans/migrations/0030_vote_value.py
new file mode 100644
index 0000000000..0bcb2ee19e
--- /dev/null
+++ b/weblate/trans/migrations/0030_vote_value.py
@@ -0,0 +1,21 @@
+# Generated by Django 2.2.1 on 2019-05-21 18:16
+
+from django.db import migrations
+
+from weblate.utils.db import table_has_row
+
+
+class RemoveFieldOptional(migrations.RemoveField):
+    def database_forwards(self, app_label, schema_editor, from_state, to_state):
+        if not table_has_row(schema_editor.connection, "trans_vote", "positive"):
+            return
+        super(RemoveFieldOptional, self).database_forwards(
+            app_label, schema_editor, from_state, to_state
+        )
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [("trans", "0029_vote_value")]
+
+    operations = [RemoveFieldOptional(model_name="vote", name="positive")]
diff --git a/weblate/utils/db.py b/weblate/utils/db.py
index 2c894c5328..540b5d463c 100644
--- a/weblate/utils/db.py
+++ b/weblate/utils/db.py
@@ -20,7 +20,7 @@
 
 from __future__ import unicode_literals
 
-ESCAPED = frozenset('.\\+*?[^]$(){}=!<>|:-')
+ESCAPED = frozenset(".\\+*?[^]$(){}=!<>|:-")
 
 
 def re_escape(pattern):
@@ -35,3 +35,15 @@ def re_escape(pattern):
         elif char in ESCAPED:
             string[i] = "\\" + char
     return "".join(string)
+
+
+def table_has_row(connection, table, rowname):
+    """Check whether actual table has row."""
+    with connection.cursor() as cursor:
+        table_description = connection.introspection.get_table_description(
+            cursor, table
+        )
+        for row in table_description:
+            if row.name == rowname:
+                return True
+    return False
-- 
2.20.1

